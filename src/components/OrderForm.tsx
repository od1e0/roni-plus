import React, { useState, useEffect } from 'react';
import { OrderService } from '../services/api';
import type { CalculatorSelection, CalculatorOrderData } from '../types';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
const generateOrderId = (): string => {
  const timestamp = Date.now().toString(36);
  const randomStr = Math.random().toString(36).substring(2, 8);
  return `order_${timestamp}_${randomStr}`;
};

interface OrderFormProps {
  onSubmit?: () => void;
  className?: string;
  calculatorData?: CalculatorOrderData;
  onCalculatorReset?: () => void;
  source?: string;
}

const OrderForm: React.FC<OrderFormProps> = ({ onSubmit, className = '', calculatorData, onCalculatorReset, source }) => {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    message: '',
    source: calculatorData ? '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' : '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏'
  });
  const [orderId, setOrderId] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');
  const [errorMessage, setErrorMessage] = useState('');
  const [telegramStatus, setTelegramStatus] = useState<'idle' | 'sending' | 'sent' | 'failed'>('idle');
  const [timeUntilNextSubmit, setTimeUntilNextSubmit] = useState<number>(0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    checkLastSubmitTime();
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const timer = setInterval(() => {
      if (timeUntilNextSubmit > 0) {
        setTimeUntilNextSubmit(prev => {
          if (prev <= 1) {
            return 0;
          }
          return prev - 1;
        });
      }
    }, 1000);

    return () => clearInterval(timer);
  }, [timeUntilNextSubmit]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
  useEffect(() => {
    setFormData(prev => ({
      ...prev,
      source: source || (calculatorData ? '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' : '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏')
    }));
    setOrderId(generateOrderId());
  }, [calculatorData, source]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  const checkLastSubmitTime = (): boolean => {
    const lastSubmitTime = localStorage.getItem('lastOrderSubmitTime');
    if (!lastSubmitTime) return true;

    const now = Date.now();
    const lastSubmit = parseInt(lastSubmitTime);
    const timeDiff = now - lastSubmit;
    const oneHour = 60 * 60 * 1000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

    if (timeDiff < oneHour) {
      const remainingTime = oneHour - timeDiff;
      setTimeUntilNextSubmit(Math.ceil(remainingTime / 1000)); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      return false;
    }

    return true;
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
  const saveSubmitTime = () => {
    localStorage.setItem('lastOrderSubmitTime', Date.now().toString());
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}—á ${minutes}–º ${secs}—Å`;
    } else if (minutes > 0) {
      return `${minutes}–º ${secs}—Å`;
    } else {
      return `${secs}—Å`;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (!checkLastSubmitTime()) {
      setSubmitStatus('error');
      setErrorMessage(`–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å. –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ${formatTime(timeUntilNextSubmit)}`);
      return;
    }
    
    // Validation
    if (!formData.name.trim() || !formData.phone.trim() || !formData.message.trim()) {
      setSubmitStatus('error');
      setErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setIsSubmitting(true);
    setSubmitStatus('idle');
    setErrorMessage('');
    setTelegramStatus('idle');

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      let fullMessage = formData.message;
      if (calculatorData && calculatorData.selections.length > 0) {
        fullMessage += '\n\nüìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:</b>\n';
        fullMessage += `üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${calculatorData.totalPrice.toFixed(2)} —Ä—É–±.\n\n`;
        
        calculatorData.selections.forEach((selection, index) => {
          fullMessage += `üî∏ <b>${index + 1}. ${selection.part.name}</b>\n`;
          fullMessage += `   üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: ${selection.material.name} (${selection.material.origin})\n`;
          fullMessage += `   üìè –†–∞–∑–º–µ—Ä: ${selection.size.name} (${selection.size.dimensions})\n`;
          fullMessage += `   üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${selection.quantity} —à—Ç.\n`;
          fullMessage += `   üí∞ –¶–µ–Ω–∞: ${selection.size.price.toFixed(2)} —Ä—É–±.\n`;
          
          if (selection.services.length > 0) {
            fullMessage += `   ‚öôÔ∏è –î–æ–ø. —É—Å–ª—É–≥–∏: ${selection.services.map(s => `${s.name} (${s.price.toFixed(2)} —Ä—É–±.)`).join(', ')}\n`;
          }
          fullMessage += `   üíµ <b>–ò—Ç–æ–≥–æ –∑–∞ –ø–æ–∑–∏—Ü–∏—é:</b> ${selection.totalPrice.toFixed(2)} —Ä—É–±.\n\n`;
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º—É (–∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ Telegram)
      setTelegramStatus('sending');
      
      try {
        const orderData = {
          name: formData.name,
          phone: formData.phone,
          message: fullMessage,
          source: formData.source
        };

        await OrderService.createOrder(orderData);
        
        setSubmitStatus('success');
        setTelegramStatus('sent');
        setFormData({ name: '', phone: '', message: '', source: '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏' });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        saveSubmitTime();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        if (calculatorData && onCalculatorReset) {
          onCalculatorReset();
        }
        
        if (onSubmit) {
          onSubmit();
        }
        
        setTimeout(() => {
          setSubmitStatus('idle');
          setTelegramStatus('idle');
        }, 3000);
        
      } catch (orderError) {
        setTelegramStatus('failed');
        console.error('Failed to create order:', orderError);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      
    } catch (error) {
      setSubmitStatus('error');
      if (error instanceof Error) {
        setErrorMessage(error.message);
      } else {
        setErrorMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      console.error('Order submission error:', error);
      setTelegramStatus('idle');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={className}>
      {/* Timer Display */}
      {timeUntilNextSubmit > 0 && (
        <div className="mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
          <div className="flex items-center justify-center text-orange-800">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="font-medium">
              –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑: {formatTime(timeUntilNextSubmit)}
            </span>
          </div>
        </div>
      )}
      
      {/* Calculator Data Display */}
      {calculatorData && calculatorData.selections.length > 0 && (
        <div className="mb-4 p-4 bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 rounded-xl shadow-sm">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
              </div>
              <h4 className="font-medium text-blue-900 text-lg">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞</h4>
            </div>
          </div>
          
          <div className="space-y-2 mb-3">
            {calculatorData.selections.map((selection, index) => (
              <div key={index} className="text-sm text-blue-800 bg-gradient-to-r from-blue-100 to-blue-50 p-3 rounded-lg border border-blue-200 shadow-sm">
                <div className="font-medium text-blue-900 mb-2">üî∏ {index + 1}. {selection.part.name}</div>
                <div className="grid grid-cols-1 gap-1 text-blue-700">
                  <div>üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {selection.material.name} ({selection.material.origin})</div>
                  <div>üìè –†–∞–∑–º–µ—Ä: {selection.size.name} ({selection.size.dimensions})</div>
                  <div>üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {selection.quantity} —à—Ç.</div>
                  {selection.services.length > 0 && (
                    <div>‚öôÔ∏è –£—Å–ª—É–≥–∏: {selection.services.map(s => s.name).join(', ')}</div>
                  )}
                </div>
                <div className="font-medium text-blue-900 mt-2 pt-2 border-t border-blue-200">
                  üí∞ –¶–µ–Ω–∞: {selection.totalPrice.toFixed(2)} —Ä—É–±.
                </div>
              </div>
            ))}
          </div>
          
          <div className="text-lg font-bold text-blue-900 border-t border-blue-200 pt-3 flex items-center justify-between bg-gradient-to-r from-blue-100 to-blue-50 p-3 rounded-lg">
            <span className="flex items-center">
              <span className="mr-2">üí∞</span>
              –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:
            </span>
            <span className="text-2xl text-blue-800">{calculatorData.totalPrice.toFixed(2)} —Ä—É–±.</span>
          </div>
        </div>
      )}


      <form onSubmit={handleSubmit} className="space-y-3 sm:space-y-4">
        <div>
          <label htmlFor="name" className="form-label">–ò–º—è</label>
          <input 
            type="text" 
            id="name"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            className="form-input" 
            placeholder="–í–∞—à–µ –∏–º—è"
            disabled={isSubmitting}
          />
        </div>
        <div>
          <label htmlFor="phone" className="form-label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
          <input 
            type="tel" 
            id="phone"
            name="phone"
            value={formData.phone}
            onChange={handleInputChange}
            className="form-input" 
            placeholder="+375 (XX) XXX XX XX"
            disabled={isSubmitting}
          />
        </div>
        <div>
          <label htmlFor="message" className="form-label">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
          <textarea 
            id="message"
            name="message"
            value={formData.message}
            onChange={handleInputChange}
            className="form-input h-32" 
            placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            disabled={isSubmitting}
          ></textarea>
        </div>

        {/* Status Messages */}
        {submitStatus === 'success' && (
          <div className="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-lg">
            <div className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <div>
                <p className="font-medium">–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</p>
                <p className="text-sm text-green-700">–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
              </div>
            </div>
          </div>
        )}

        {submitStatus === 'error' && (
          <div className="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg">
            <div className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              {errorMessage}
            </div>
          </div>
        )}

        <div className="pt-2">
          <button 
            type="submit" 
            className={`w-full text-sm sm:text-base py-2 sm:py-3 rounded-lg font-medium transition-all ${
              timeUntilNextSubmit > 0 || isSubmitting
                ? 'bg-gray-400 text-gray-600 cursor-not-allowed'
                : 'btn-primary hover:bg-primary-dark'
            }`}
            disabled={isSubmitting || timeUntilNextSubmit > 0}
          >
            {isSubmitting ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                {telegramStatus === 'sending' ? '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram...' : '–û—Ç–ø—Ä–∞–≤–∫–∞...'}
              </div>
            ) : timeUntilNextSubmit > 0 ? (
              `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${formatTime(timeUntilNextSubmit)}`
            ) : (
              '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
            )}
          </button>
          
          {/* Telegram Status Indicator */}
          {telegramStatus === 'sending' && (
            <div className="mt-2 text-center text-sm text-blue-600">
              üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...
            </div>
          )}
          {telegramStatus === 'sent' && (
            <div className="mt-2 text-center text-sm text-green-600">
              ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram
            </div>
          )}
          {telegramStatus === 'failed' && (
            <div className="mt-2 text-center text-sm text-orange-600">
              ‚ö†Ô∏è Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ...
            </div>
          )}
        </div>
      </form>
    </div>
  );
};

export default OrderForm; 